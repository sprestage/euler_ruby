#!/usr/bin/env ruby
###
# Largest product in a series
# Problem 8
###
# The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
#
# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
###
# I do not see how this could work, as the specs say "find the thirteen
#  adjacent digits" and this program only appears to find the 5 adjacent
#  digits.  I'm awfully sure that the Euler Project site said my answer
#  was correct, so I'm reluctant to change this solution until the Euler
#  site comes back.  I may give it a try anyway, and keep the solution
#  in comments for my own satisfaction.  Here is hoping the Euler site
#  can recover and again provide the delightful opportunity for learning
#  that it has provided in the past.  June 22, 2014   -sprestage
#
# Ok, new solution implemented and code refactored into methods.  The example
#  answer tests out successfully, but I am unable to check the challenge answer.
#  my code returns a highest product of 23514624000, but my README shows the
#  correct answer was 40824 when I originally solved this and submitted the
#  answer to projecteuler.net.  This is the best I can to for a solution,
#  unless or until the Euler Project site returns.  June 23, 2014  -sprestage
###

SERIES = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
# SERIES = "73167176531330624919"

def find_largest_product_in_string(number_of_adjacent_digits)
  @digits = number_of_adjacent_digits
  @series = SERIES
  @length = @series.length
  @product = 1
  @highest_product = 0

  @array_of_numbers = @series.split("").map { |s| s.to_i }
  puts "length = #{@length}"
  puts "digits = #{@digits}"
  0.upto(@length-@digits) do |x|
    0.upto(@digits-1) do |y|
      # puts "#{x}, #{y}: array_of_numbers[#{x+y}] = #{@array_of_numbers[(x+y)]}"
      @product = @product * (@array_of_numbers[(x+y)])
    end
    if @product > @highest_product
      @highest_product = @product
      puts "highest_product so far, #{@highest_product}"
    end
    @product = 1
  end
  return @highest_product
end

puts "highest_product = #{find_largest_product_in_string(4)}"

# SERIES = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

# @series = SERIES
# length = @series.length
# highest_product = 0

# array_of_numbers = @series.split("").map { |s| s.to_i }

# 4.upto(length-1) do |x|
#   product = array_of_numbers[x-4] * array_of_numbers[x-3] * array_of_numbers[x-2] * array_of_numbers[x-1] * array_of_numbers[x]
#   highest_product = product if product > highest_product
# end

# puts "highest_product = #{highest_product}"
